name: redpanda-cdc-postgres

volumes:
  redpanda: {}
  redis-data: {}

networks:
  appnet: {}

services:
  postgres:
    image: debezium/postgres:16
    container_name: postgres
    ports: ["5432:5432"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgresuser -d pandashop"]
      interval: 2s
      timeout: 20s
      retries: 10
    environment:
      - POSTGRES_USER=postgresuser
      - POSTGRES_PASSWORD=postgrespw
      - POSTGRES_DB=pandashop
      - PGPASSWORD=postgrespw
    volumes:
      - ./data:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks: [appnet]

  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:${REDPANDA_VERSION:-latest}
    container_name: redpanda
    command:
      - redpanda
      - start
      - --mode=dev-container
      - --smp=1
      - --kafka-addr=internal://0.0.0.0:9092,external://0.0.0.0:19092
      - --advertise-kafka-addr=internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr=internal://0.0.0.0:8082,external://0.0.0.0:18082
      - --advertise-pandaproxy-addr=internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr=internal://0.0.0.0:8081,external://0.0.0.0:18081
      - --rpc-addr=redpanda:33145
      - --advertise-rpc-addr=redpanda:33145
    ports:
      - "18081:18081"
      - "18082:18082"
      - "19092:19092"
      - "19644:9644"
    volumes:
      - redpanda:/var/lib/redpanda/data
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 5s
    restart: unless-stopped
    networks: [appnet]

  debezium:
    image: debezium/connect:2.4
    container_name: debezium
    depends_on:
      redpanda:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      BOOTSTRAP_SERVERS: redpanda:9092
      GROUP_ID: "1"
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      STATUS_STORAGE_TOPIC: connect_statuses
    ports: ["8083:8083"]
    restart: unless-stopped
    networks: [appnet]

  spark-master:
    build:
      context: .
      dockerfile: spark.Dockerfile
    image: local/spark-with-python:3.4.1
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - PYSPARK_PYTHON=python3
      - PYSPARK_DRIVER_PYTHON=python3
    ports:
      - "7077:7077"
      - "8080:8080"
    volumes:
      - ./app:/opt/app
    depends_on: [redpanda]
    restart: unless-stopped
    networks: [appnet]

  spark-worker:
    build:
      context: .
      dockerfile: spark.Dockerfile
    image: local/spark-with-python:3.4.1
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - PYSPARK_PYTHON=python3
    depends_on: [spark-master, redpanda]
    volumes:
      - ./app:/opt/app
    restart: unless-stopped
    networks: [appnet]

  clickhouse:
    image: clickhouse/clickhouse-server:24.8
    container_name: clickhouse
    environment:
      CLICKHOUSE_DB: app
      CLICKHOUSE_USER: app
      CLICKHOUSE_PASSWORD: app
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: "1"
    ports:
      - "8123:8123"
      - "9000:9000"
      - "9009:9009"
    volumes:
      - ./clickhouse/data:/var/lib/clickhouse
      - ./clickhouse/logs:/var/log/clickhouse-server
      - ./clickhouse/init:/docker-entrypoint-initdb.d
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test: ["CMD-SHELL", "clickhouse-client -u app --password app -q 'SELECT 1'"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [appnet]

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 2s
      retries: 5
    restart: unless-stopped
    networks: [appnet]

  redis-consumer:
    build:
      context: .
      dockerfile: redis-consumer.Dockerfile
    container_name: redis-consumer
    environment:
      - KAFKA_BOOTSTRAP=redpanda:9092
      - ENRICH_TOPIC=enriched_engagement_events
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on: [redpanda, redis]
    restart: unless-stopped
    networks: [appnet]
